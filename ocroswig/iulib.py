# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
Low-level bindings to the iulib library.
"""

import _iulib
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types



def refcount(*args):
  """refcount(PyObject object) -> int"""
  return _iulib.refcount(*args)
from numpy import zeros
def numpy(a,type='f'):
    shape = []
    for i in range(4):
        if a.dim(i)==0: break
        shape.append(a.dim(i))
    result = zeros(shape,type)
    numpy_of_narray(result,a)
    return result
def narray(a,type='f'):
    result = None
    if type=='B':
        result = bytearray()
    elif type=='i':
        result = intarray()
    elif type=='f':
        result = floatarray()
    else:
        raise Exception('%s: unknown type',type)
    narray_of_numpy(result,a)
    return result

class floatarray(_object):
    """Proxy of C++ floatarray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatarray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatarray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> floatarray
        __init__(self, int ?) -> floatarray
        __init__(self, int ?, int ?) -> floatarray
        __init__(self, int ?, int ?, int ?) -> floatarray
        __init__(self, int ?, int ?, int ?, int ?) -> floatarray
        """
        this = _iulib.new_floatarray(*args)
        try: self.this.append(this)
        except: self.this = this
    def length(*args):
        """length(self) -> int"""
        return _iulib.floatarray_length(*args)

    def rank(*args):
        """rank(self) -> int"""
        return _iulib.floatarray_rank(*args)

    def dim(*args):
        """dim(self, int ?) -> int"""
        return _iulib.floatarray_dim(*args)

    def clear(*args):
        """clear(self)"""
        return _iulib.floatarray_clear(*args)

    def resize(*args):
        """
        resize(self, int ?, int d1=0, int d2=0, int d3=0)
        resize(self, int ?, int d1=0, int d2=0)
        resize(self, int ?, int d1=0)
        resize(self, int ?)
        """
        return _iulib.floatarray_resize(*args)

    def reshape(*args):
        """
        reshape(self, int ?, int d1=0, int d2=0, int d3=0)
        reshape(self, int ?, int d1=0, int d2=0)
        reshape(self, int ?, int d1=0)
        reshape(self, int ?)
        """
        return _iulib.floatarray_reshape(*args)

    def at(*args):
        """
        at(self, int ?) -> float
        at(self, int ?, int ?) -> float
        at(self, int ?, int ?, int ?) -> float
        at(self, int ?, int ?, int ?, int ?) -> float
        """
        return _iulib.floatarray_at(*args)

    def put(*args):
        """
        put(self, int ?, float ?)
        put(self, int ?, int ?, float ?)
        put(self, int ?, int ?, int ?, float ?)
        put(self, int ?, int ?, int ?, int ?, float ?)
        """
        return _iulib.floatarray_put(*args)

    def at1d(*args):
        """at1d(self, int ?) -> float"""
        return _iulib.floatarray_at1d(*args)

    def put1d(*args):
        """put1d(self, int ?, float ?)"""
        return _iulib.floatarray_put1d(*args)

    def set(*args):
        """
        set(self, float ?)
        set(self, float ?, float ?)
        set(self, float ?, float ?, float ?)
        set(self, float ?, float ?, float ?, float ?)
        """
        return _iulib.floatarray_set(*args)

    def fill(*args):
        """fill(self, float ?)"""
        return _iulib.floatarray_fill(*args)

    def append(*args):
        """append(self, floatarray ?)"""
        return _iulib.floatarray_append(*args)

    def swap(*args):
        """swap(self, floatarray ?)"""
        return _iulib.floatarray_swap(*args)

    def move(*args):
        """move(self, floatarray ?)"""
        return _iulib.floatarray_move(*args)

    def copy(*args):
        """
        copy(self, floatarray ?)
        copy(self,  ?)
        copy(self,  ?)
        copy(self,  ?)
        copy(self,  ?)
        """
        return _iulib.floatarray_copy(*args)

    def makelike(*args):
        """
        makelike(self,  ?)
        makelike(self,  ?)
        makelike(self,  ?)
        makelike(self,  ?)
        """
        return _iulib.floatarray_makelike(*args)

    def tostring(*args):
        """tostring(self, char s)"""
        return _iulib.floatarray_tostring(*args)

    def fromstring(*args):
        """fromstring(self, char s, int len)"""
        return _iulib.floatarray_fromstring(*args)

    def __iadd__(*args):
        """
        __iadd__(self, float x)
        __iadd__(self,  x)
        """
        return _iulib.floatarray___iadd__(*args)

    def __isub__(*args):
        """
        __isub__(self, float x)
        __isub__(self,  x)
        """
        return _iulib.floatarray___isub__(*args)

    def __imul__(*args):
        """
        __imul__(self, float x)
        __imul__(self,  x)
        """
        return _iulib.floatarray___imul__(*args)

    def __idiv__(*args):
        """
        __idiv__(self, float x)
        __idiv__(self,  x)
        """
        return _iulib.floatarray___idiv__(*args)

    def __eq__(*args):
        """__eq__(self,  x) -> bool"""
        return _iulib.floatarray___eq__(*args)

    __swig_destroy__ = _iulib.delete_floatarray
    __del__ = lambda self : None;
floatarray_swigregister = _iulib.floatarray_swigregister
floatarray_swigregister(floatarray)

def narray_of_numpy(*args):
  """
    narray_of_numpy( ?, PyObject ?)
    narray_of_numpy( ?, PyObject ?)
    narray_of_numpy( ?, PyObject ?)
    """
  return _iulib.narray_of_numpy(*args)

def numpy_of_narray(*args):
  """
    numpy_of_narray(PyObject ?,  ?)
    numpy_of_narray(PyObject ?,  ?)
    numpy_of_narray(PyObject ?,  ?)
    """
  return _iulib.numpy_of_narray(*args)

class intarray(_object):
    """Proxy of C++ intarray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intarray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intarray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> intarray
        __init__(self, int ?) -> intarray
        __init__(self, int ?, int ?) -> intarray
        __init__(self, int ?, int ?, int ?) -> intarray
        __init__(self, int ?, int ?, int ?, int ?) -> intarray
        """
        this = _iulib.new_intarray(*args)
        try: self.this.append(this)
        except: self.this = this
    def length(*args):
        """length(self) -> int"""
        return _iulib.intarray_length(*args)

    def rank(*args):
        """rank(self) -> int"""
        return _iulib.intarray_rank(*args)

    def dim(*args):
        """dim(self, int ?) -> int"""
        return _iulib.intarray_dim(*args)

    def clear(*args):
        """clear(self)"""
        return _iulib.intarray_clear(*args)

    def resize(*args):
        """
        resize(self, int ?, int d1=0, int d2=0, int d3=0)
        resize(self, int ?, int d1=0, int d2=0)
        resize(self, int ?, int d1=0)
        resize(self, int ?)
        """
        return _iulib.intarray_resize(*args)

    def reshape(*args):
        """
        reshape(self, int ?, int d1=0, int d2=0, int d3=0)
        reshape(self, int ?, int d1=0, int d2=0)
        reshape(self, int ?, int d1=0)
        reshape(self, int ?)
        """
        return _iulib.intarray_reshape(*args)

    def at(*args):
        """
        at(self, int ?) -> int
        at(self, int ?, int ?) -> int
        at(self, int ?, int ?, int ?) -> int
        at(self, int ?, int ?, int ?, int ?) -> int
        """
        return _iulib.intarray_at(*args)

    def put(*args):
        """
        put(self, int ?, int ?)
        put(self, int ?, int ?, int ?)
        put(self, int ?, int ?, int ?, int ?)
        put(self, int ?, int ?, int ?, int ?, int ?)
        """
        return _iulib.intarray_put(*args)

    def at1d(*args):
        """at1d(self, int ?) -> int"""
        return _iulib.intarray_at1d(*args)

    def put1d(*args):
        """put1d(self, int ?, int ?)"""
        return _iulib.intarray_put1d(*args)

    def set(*args):
        """
        set(self, int ?)
        set(self, int ?, int ?)
        set(self, int ?, int ?, int ?)
        set(self, int ?, int ?, int ?, int ?)
        """
        return _iulib.intarray_set(*args)

    def fill(*args):
        """fill(self, int ?)"""
        return _iulib.intarray_fill(*args)

    def append(*args):
        """append(self, intarray ?)"""
        return _iulib.intarray_append(*args)

    def swap(*args):
        """swap(self, intarray ?)"""
        return _iulib.intarray_swap(*args)

    def move(*args):
        """move(self, intarray ?)"""
        return _iulib.intarray_move(*args)

    def copy(*args):
        """
        copy(self, intarray ?)
        copy(self,  ?)
        copy(self,  ?)
        copy(self,  ?)
        copy(self,  ?)
        """
        return _iulib.intarray_copy(*args)

    def makelike(*args):
        """
        makelike(self,  ?)
        makelike(self,  ?)
        makelike(self,  ?)
        makelike(self,  ?)
        """
        return _iulib.intarray_makelike(*args)

    def fromstring(*args):
        """fromstring(self, char s, int len)"""
        return _iulib.intarray_fromstring(*args)

    def __iadd__(*args):
        """
        __iadd__(self, int x)
        __iadd__(self,  x)
        """
        return _iulib.intarray___iadd__(*args)

    def __isub__(*args):
        """
        __isub__(self, int x)
        __isub__(self,  x)
        """
        return _iulib.intarray___isub__(*args)

    def __imul__(*args):
        """
        __imul__(self, int x)
        __imul__(self,  x)
        """
        return _iulib.intarray___imul__(*args)

    def __idiv__(*args):
        """
        __idiv__(self, int x)
        __idiv__(self,  x)
        """
        return _iulib.intarray___idiv__(*args)

    def __eq__(*args):
        """__eq__(self,  x) -> bool"""
        return _iulib.intarray___eq__(*args)

    __swig_destroy__ = _iulib.delete_intarray
    __del__ = lambda self : None;
intarray_swigregister = _iulib.intarray_swigregister
intarray_swigregister(intarray)

class bytearray(_object):
    """Proxy of C++ bytearray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bytearray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bytearray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> bytearray
        __init__(self, int ?) -> bytearray
        __init__(self, int ?, int ?) -> bytearray
        __init__(self, int ?, int ?, int ?) -> bytearray
        __init__(self, int ?, int ?, int ?, int ?) -> bytearray
        """
        this = _iulib.new_bytearray(*args)
        try: self.this.append(this)
        except: self.this = this
    def length(*args):
        """length(self) -> int"""
        return _iulib.bytearray_length(*args)

    def rank(*args):
        """rank(self) -> int"""
        return _iulib.bytearray_rank(*args)

    def dim(*args):
        """dim(self, int ?) -> int"""
        return _iulib.bytearray_dim(*args)

    def clear(*args):
        """clear(self)"""
        return _iulib.bytearray_clear(*args)

    def resize(*args):
        """
        resize(self, int ?, int d1=0, int d2=0, int d3=0)
        resize(self, int ?, int d1=0, int d2=0)
        resize(self, int ?, int d1=0)
        resize(self, int ?)
        """
        return _iulib.bytearray_resize(*args)

    def reshape(*args):
        """
        reshape(self, int ?, int d1=0, int d2=0, int d3=0)
        reshape(self, int ?, int d1=0, int d2=0)
        reshape(self, int ?, int d1=0)
        reshape(self, int ?)
        """
        return _iulib.bytearray_reshape(*args)

    def at(*args):
        """
        at(self, int ?) -> unsigned char
        at(self, int ?, int ?) -> unsigned char
        at(self, int ?, int ?, int ?) -> unsigned char
        at(self, int ?, int ?, int ?, int ?) -> unsigned char
        """
        return _iulib.bytearray_at(*args)

    def put(*args):
        """
        put(self, int ?, unsigned char ?)
        put(self, int ?, int ?, unsigned char ?)
        put(self, int ?, int ?, int ?, unsigned char ?)
        put(self, int ?, int ?, int ?, int ?, unsigned char ?)
        """
        return _iulib.bytearray_put(*args)

    def at1d(*args):
        """at1d(self, int ?) -> unsigned char"""
        return _iulib.bytearray_at1d(*args)

    def put1d(*args):
        """put1d(self, int ?, unsigned char ?)"""
        return _iulib.bytearray_put1d(*args)

    def set(*args):
        """
        set(self, unsigned char ?)
        set(self, unsigned char ?, unsigned char ?)
        set(self, unsigned char ?, unsigned char ?, unsigned char ?)
        set(self, unsigned char ?, unsigned char ?, unsigned char ?, 
            unsigned char ?)
        """
        return _iulib.bytearray_set(*args)

    def fill(*args):
        """fill(self, unsigned char ?)"""
        return _iulib.bytearray_fill(*args)

    def append(*args):
        """append(self, bytearray ?)"""
        return _iulib.bytearray_append(*args)

    def swap(*args):
        """swap(self, bytearray ?)"""
        return _iulib.bytearray_swap(*args)

    def move(*args):
        """move(self, bytearray ?)"""
        return _iulib.bytearray_move(*args)

    def copy(*args):
        """
        copy(self, bytearray ?)
        copy(self,  ?)
        copy(self,  ?)
        copy(self,  ?)
        copy(self,  ?)
        """
        return _iulib.bytearray_copy(*args)

    def makelike(*args):
        """
        makelike(self,  ?)
        makelike(self,  ?)
        makelike(self,  ?)
        makelike(self,  ?)
        """
        return _iulib.bytearray_makelike(*args)

    def tostring(*args):
        """tostring(self, char s)"""
        return _iulib.bytearray_tostring(*args)

    def fromstring(*args):
        """fromstring(self, char s, int len)"""
        return _iulib.bytearray_fromstring(*args)

    def __iadd__(*args):
        """
        __iadd__(self, byte x)
        __iadd__(self,  x)
        """
        return _iulib.bytearray___iadd__(*args)

    def __isub__(*args):
        """
        __isub__(self, byte x)
        __isub__(self,  x)
        """
        return _iulib.bytearray___isub__(*args)

    def __imul__(*args):
        """
        __imul__(self, byte x)
        __imul__(self,  x)
        """
        return _iulib.bytearray___imul__(*args)

    def __idiv__(*args):
        """
        __idiv__(self, byte x)
        __idiv__(self,  x)
        """
        return _iulib.bytearray___idiv__(*args)

    def __eq__(*args):
        """__eq__(self,  x) -> bool"""
        return _iulib.bytearray___eq__(*args)

    __swig_destroy__ = _iulib.delete_bytearray
    __del__ = lambda self : None;
bytearray_swigregister = _iulib.bytearray_swigregister
bytearray_swigregister(bytearray)

class shortarray(_object):
    """Proxy of C++ shortarray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shortarray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shortarray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> shortarray
        __init__(self, int ?) -> shortarray
        __init__(self, int ?, int ?) -> shortarray
        __init__(self, int ?, int ?, int ?) -> shortarray
        __init__(self, int ?, int ?, int ?, int ?) -> shortarray
        """
        this = _iulib.new_shortarray(*args)
        try: self.this.append(this)
        except: self.this = this
    def length(*args):
        """length(self) -> int"""
        return _iulib.shortarray_length(*args)

    def rank(*args):
        """rank(self) -> int"""
        return _iulib.shortarray_rank(*args)

    def dim(*args):
        """dim(self, int ?) -> int"""
        return _iulib.shortarray_dim(*args)

    def clear(*args):
        """clear(self)"""
        return _iulib.shortarray_clear(*args)

    def resize(*args):
        """
        resize(self, int ?, int d1=0, int d2=0, int d3=0)
        resize(self, int ?, int d1=0, int d2=0)
        resize(self, int ?, int d1=0)
        resize(self, int ?)
        """
        return _iulib.shortarray_resize(*args)

    def reshape(*args):
        """
        reshape(self, int ?, int d1=0, int d2=0, int d3=0)
        reshape(self, int ?, int d1=0, int d2=0)
        reshape(self, int ?, int d1=0)
        reshape(self, int ?)
        """
        return _iulib.shortarray_reshape(*args)

    def at(*args):
        """
        at(self, int ?) -> short
        at(self, int ?, int ?) -> short
        at(self, int ?, int ?, int ?) -> short
        at(self, int ?, int ?, int ?, int ?) -> short
        """
        return _iulib.shortarray_at(*args)

    def put(*args):
        """
        put(self, int ?, short ?)
        put(self, int ?, int ?, short ?)
        put(self, int ?, int ?, int ?, short ?)
        put(self, int ?, int ?, int ?, int ?, short ?)
        """
        return _iulib.shortarray_put(*args)

    def at1d(*args):
        """at1d(self, int ?) -> short"""
        return _iulib.shortarray_at1d(*args)

    def put1d(*args):
        """put1d(self, int ?, short ?)"""
        return _iulib.shortarray_put1d(*args)

    def set(*args):
        """
        set(self, short ?)
        set(self, short ?, short ?)
        set(self, short ?, short ?, short ?)
        set(self, short ?, short ?, short ?, short ?)
        """
        return _iulib.shortarray_set(*args)

    def fill(*args):
        """fill(self, short ?)"""
        return _iulib.shortarray_fill(*args)

    def append(*args):
        """append(self, shortarray ?)"""
        return _iulib.shortarray_append(*args)

    def swap(*args):
        """swap(self, shortarray ?)"""
        return _iulib.shortarray_swap(*args)

    def move(*args):
        """move(self, shortarray ?)"""
        return _iulib.shortarray_move(*args)

    def copy(*args):
        """
        copy(self, shortarray ?)
        copy(self,  ?)
        copy(self,  ?)
        copy(self,  ?)
        copy(self,  ?)
        """
        return _iulib.shortarray_copy(*args)

    def makelike(*args):
        """
        makelike(self,  ?)
        makelike(self,  ?)
        makelike(self,  ?)
        makelike(self,  ?)
        """
        return _iulib.shortarray_makelike(*args)

    def tostring(*args):
        """tostring(self, char s)"""
        return _iulib.shortarray_tostring(*args)

    def fromstring(*args):
        """fromstring(self, char s, int len)"""
        return _iulib.shortarray_fromstring(*args)

    __swig_destroy__ = _iulib.delete_shortarray
    __del__ = lambda self : None;
shortarray_swigregister = _iulib.shortarray_swigregister
shortarray_swigregister(shortarray)

class rectangle(_object):
    """Proxy of C++ rectangle class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rectangle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x0"] = _iulib.rectangle_x0_set
    __swig_getmethods__["x0"] = _iulib.rectangle_x0_get
    if _newclass:x0 = _swig_property(_iulib.rectangle_x0_get, _iulib.rectangle_x0_set)
    __swig_setmethods__["y0"] = _iulib.rectangle_y0_set
    __swig_getmethods__["y0"] = _iulib.rectangle_y0_get
    if _newclass:y0 = _swig_property(_iulib.rectangle_y0_get, _iulib.rectangle_y0_set)
    __swig_setmethods__["x1"] = _iulib.rectangle_x1_set
    __swig_getmethods__["x1"] = _iulib.rectangle_x1_get
    if _newclass:x1 = _swig_property(_iulib.rectangle_x1_get, _iulib.rectangle_x1_set)
    __swig_setmethods__["y1"] = _iulib.rectangle_y1_set
    __swig_getmethods__["y1"] = _iulib.rectangle_y1_get
    if _newclass:y1 = _swig_property(_iulib.rectangle_y1_get, _iulib.rectangle_y1_set)
    def __init__(self, *args): 
        """
        __init__(self) -> rectangle
        __init__(self, rectangle r) -> rectangle
        __init__(self, int x0, int y0, int x1, int y1) -> rectangle
        """
        this = _iulib.new_rectangle(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args):
        """empty(self) -> bool"""
        return _iulib.rectangle_empty(*args)

    def pad_by(*args):
        """pad_by(self, int dx, int dy)"""
        return _iulib.rectangle_pad_by(*args)

    def shift_by(*args):
        """shift_by(self, int dx, int dy)"""
        return _iulib.rectangle_shift_by(*args)

    def width(*args):
        """width(self) -> int"""
        return _iulib.rectangle_width(*args)

    def height(*args):
        """height(self) -> int"""
        return _iulib.rectangle_height(*args)

    def contains(*args):
        """
        contains(self, int x, int y) -> bool
        contains(self, point p) -> bool
        """
        return _iulib.rectangle_contains(*args)

    def intersect(*args):
        """intersect(self, rectangle other)"""
        return _iulib.rectangle_intersect(*args)

    def include(*args):
        """
        include(self, int x, int y)
        include(self, rectangle other)
        """
        return _iulib.rectangle_include(*args)

    def intersection(*args):
        """intersection(self, rectangle other) -> rectangle"""
        return _iulib.rectangle_intersection(*args)

    def inclusion(*args):
        """inclusion(self, rectangle other) -> rectangle"""
        return _iulib.rectangle_inclusion(*args)

    def grow(*args):
        """grow(self, int offset) -> rectangle"""
        return _iulib.rectangle_grow(*args)

    def xcenter(*args):
        """xcenter(self) -> int"""
        return _iulib.rectangle_xcenter(*args)

    def ycenter(*args):
        """ycenter(self) -> int"""
        return _iulib.rectangle_ycenter(*args)

    def area(*args):
        """area(self) -> int"""
        return _iulib.rectangle_area(*args)

    def overlaps(*args):
        """overlaps(self, rectangle other) -> bool"""
        return _iulib.rectangle_overlaps(*args)

    def includes(*args):
        """
        includes(self, int x, int y) -> bool
        includes(self, float x, float y) -> bool
        includes(self, rectangle other) -> bool
        """
        return _iulib.rectangle_includes(*args)

    def dilated_by(*args):
        """dilated_by(self, int dx0, int dy0, int dx1, int dy1) -> rectangle"""
        return _iulib.rectangle_dilated_by(*args)

    def aspect(*args):
        """aspect(self) -> float"""
        return _iulib.rectangle_aspect(*args)

    def centricity(*args):
        """centricity(self, rectangle other) -> float"""
        return _iulib.rectangle_centricity(*args)

    def fraction_covered_by(*args):
        """fraction_covered_by(self, rectangle other) -> float"""
        return _iulib.rectangle_fraction_covered_by(*args)

    __swig_destroy__ = _iulib.delete_rectangle
    __del__ = lambda self : None;
rectangle_swigregister = _iulib.rectangle_swigregister
rectangle_swigregister(rectangle)

class rectarray(_object):
    """Proxy of C++ rectarray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rectarray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rectarray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> rectarray
        __init__(self, int ?) -> rectarray
        __init__(self, int ?, int ?) -> rectarray
        __init__(self, int ?, int ?, int ?) -> rectarray
        __init__(self, int ?, int ?, int ?, int ?) -> rectarray
        """
        this = _iulib.new_rectarray(*args)
        try: self.this.append(this)
        except: self.this = this
    def length(*args):
        """length(self) -> int"""
        return _iulib.rectarray_length(*args)

    def rank(*args):
        """rank(self) -> int"""
        return _iulib.rectarray_rank(*args)

    def dim(*args):
        """dim(self, int ?) -> int"""
        return _iulib.rectarray_dim(*args)

    def clear(*args):
        """clear(self)"""
        return _iulib.rectarray_clear(*args)

    def resize(*args):
        """
        resize(self, int ?, int d1=0, int d2=0, int d3=0)
        resize(self, int ?, int d1=0, int d2=0)
        resize(self, int ?, int d1=0)
        resize(self, int ?)
        """
        return _iulib.rectarray_resize(*args)

    def reshape(*args):
        """
        reshape(self, int ?, int d1=0, int d2=0, int d3=0)
        reshape(self, int ?, int d1=0, int d2=0)
        reshape(self, int ?, int d1=0)
        reshape(self, int ?)
        """
        return _iulib.rectarray_reshape(*args)

    def at(*args):
        """
        at(self, int ?) -> rectangle
        at(self, int ?, int ?) -> rectangle
        at(self, int ?, int ?, int ?) -> rectangle
        at(self, int ?, int ?, int ?, int ?) -> rectangle
        """
        return _iulib.rectarray_at(*args)

    def put(*args):
        """
        put(self, int ?, rectangle ?)
        put(self, int ?, int ?, rectangle ?)
        put(self, int ?, int ?, int ?, rectangle ?)
        put(self, int ?, int ?, int ?, int ?, rectangle ?)
        """
        return _iulib.rectarray_put(*args)

    def fill(*args):
        """fill(self, rectangle ?)"""
        return _iulib.rectarray_fill(*args)

    def copy(*args):
        """copy(self, rectarray ?)"""
        return _iulib.rectarray_copy(*args)

    def append(*args):
        """append(self, rectarray ?)"""
        return _iulib.rectarray_append(*args)

    def swap(*args):
        """swap(self, rectarray ?)"""
        return _iulib.rectarray_swap(*args)

    def move(*args):
        """move(self, rectarray ?)"""
        return _iulib.rectarray_move(*args)

    __swig_destroy__ = _iulib.delete_rectarray
    __del__ = lambda self : None;
rectarray_swigregister = _iulib.rectarray_swigregister
rectarray_swigregister(rectarray)


def make_unit_vector(*args):
  """make_unit_vector( ?, int ?, int ?)"""
  return _iulib.make_unit_vector(*args)

def dist2(*args):
  """dist2( ?,  ?) -> double"""
  return _iulib.dist2(*args)

def norm2(*args):
  """norm2( ?) -> double"""
  return _iulib.norm2(*args)

def normalize2(*args):
  """normalize2( ?)"""
  return _iulib.normalize2(*args)

def norm1(*args):
  """norm1( ?) -> double"""
  return _iulib.norm1(*args)

def normalize1(*args):
  """normalize1( ?)"""
  return _iulib.normalize1(*args)

def fill_uniform(*args):
  """fill_uniform( ?, float ?, float ?)"""
  return _iulib.fill_uniform(*args)

def perturb(*args):
  """perturb( ?, float ?)"""
  return _iulib.perturb(*args)

def remove_value(*args):
  """remove_value(intarray ?, int ?)"""
  return _iulib.remove_value(*args)
class nuchar(_object):
    """Proxy of C++ nuchar class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nuchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nuchar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> nuchar
        __init__(self, nuchar c) -> nuchar
        __init__(self, int x) -> nuchar
        """
        this = _iulib.new_nuchar(*args)
        try: self.this.append(this)
        except: self.this = this
    def ord(*args):
        """ord(self) -> int"""
        return _iulib.nuchar_ord(*args)

    def __eq__(*args):
        """__eq__(self, nuchar c) -> bool"""
        return _iulib.nuchar___eq__(*args)

    def __ne__(*args):
        """__ne__(self, nuchar c) -> bool"""
        return _iulib.nuchar___ne__(*args)

    def __gt__(*args):
        """__gt__(self, nuchar c) -> bool"""
        return _iulib.nuchar___gt__(*args)

    def __lt__(*args):
        """__lt__(self, nuchar c) -> bool"""
        return _iulib.nuchar___lt__(*args)

    __swig_destroy__ = _iulib.delete_nuchar
    __del__ = lambda self : None;
nuchar_swigregister = _iulib.nuchar_swigregister
nuchar_swigregister(nuchar)

def absmax(*args):
  """
    absmax(floatarray ?) -> float
    absmax(intarray ?) -> int
    absmax(bytearray ?) -> unsigned char
    """
  return _iulib.absmax(*args)

def sum(*args):
  """
    sum(floatarray ?) -> double
    sum(intarray ?) -> double
    sum(bytearray ?) -> double
    """
  return _iulib.sum(*args)

def product(*args):
  """
    product(floatarray ?) -> double
    product(intarray ?) -> double
    product(bytearray ?) -> double
    """
  return _iulib.product(*args)

def argmax(*args):
  """
    argmax(floatarray ?) -> int
    argmax(intarray ?) -> int
    argmax(bytearray ?) -> int
    """
  return _iulib.argmax(*args)

def argmin(*args):
  """
    argmin(floatarray ?) -> int
    argmin(intarray ?) -> int
    argmin(bytearray ?) -> int
    """
  return _iulib.argmin(*args)

def randomly_permute(*args):
  """
    randomly_permute(floatarray ?)
    randomly_permute(intarray ?)
    randomly_permute(bytearray ?)
    """
  return _iulib.randomly_permute(*args)

def iota(*args):
  """
    iota(floatarray ?, int ?)
    iota(intarray ?, int ?)
    iota(bytearray ?, int ?)
    """
  return _iulib.iota(*args)

def reverse(*args):
  """
    reverse(floatarray ?)
    reverse(intarray ?)
    reverse(bytearray ?)
    reverse(floatarray ?, floatarray ?)
    reverse(intarray ?, intarray ?)
    reverse(bytearray ?, bytearray ?)
    """
  return _iulib.reverse(*args)

def remove_left(*args):
  """
    remove_left(floatarray ?, int ?)
    remove_left(intarray ?, int ?)
    remove_left(bytearray ?, int ?)
    """
  return _iulib.remove_left(*args)

def add(*args):
  """
    add(floatarray ?, floatarray ?)
    add(intarray ?, intarray ?)
    add(bytearray ?, bytearray ?)
    """
  return _iulib.add(*args)

def ext(*args):
  """
    ext(floatarray ?, int ?) -> float
    ext(intarray ?, int ?) -> int
    ext(bytearray ?, int ?) -> unsigned char
    ext(floatarray ?, int ?, int ?) -> float
    ext(intarray ?, int ?, int ?) -> int
    ext(bytearray ?, int ?, int ?) -> unsigned char
    """
  return _iulib.ext(*args)

def bat(*args):
  """
    bat(floatarray ?, int ?, float ?) -> float
    bat(intarray ?, int ?, int ?) -> int
    bat(bytearray ?, int ?, unsigned char ?) -> unsigned char
    bat(floatarray ?, int ?, int ?, float ?) -> float
    bat(intarray ?, int ?, int ?, int ?) -> int
    bat(bytearray ?, int ?, int ?, unsigned char ?) -> unsigned char
    """
  return _iulib.bat(*args)

def remove_element(*args):
  """
    remove_element(floatarray ?, int ?)
    remove_element(intarray ?, int ?)
    remove_element(bytearray ?, int ?)
    """
  return _iulib.remove_element(*args)

def first_index_of(*args):
  """
    first_index_of(floatarray ?, float ?) -> int
    first_index_of(intarray ?, int ?) -> int
    first_index_of(bytearray ?, unsigned char ?) -> int
    """
  return _iulib.first_index_of(*args)

def delete_at(*args):
  """
    delete_at(floatarray ?, int ?)
    delete_at(intarray ?, int ?)
    delete_at(bytearray ?, int ?)
    """
  return _iulib.delete_at(*args)

def insert_at(*args):
  """
    insert_at(floatarray ?, int ?)
    insert_at(intarray ?, int ?)
    insert_at(bytearray ?, int ?)
    insert_at(floatarray ?, int ?, float ?)
    insert_at(intarray ?, int ?, int ?)
    insert_at(bytearray ?, int ?, unsigned char ?)
    """
  return _iulib.insert_at(*args)

def clamp(*args):
  """
    clamp(float ?, float ?, float ?) -> float
    clamp(int ?, int ?, int ?) -> int
    clamp(unsigned char ?, unsigned char ?, unsigned char ?) -> unsigned char
    """
  return _iulib.clamp(*args)

def clampscale(*args):
  """
    clampscale(floatarray ?, floatarray ?, float ?, float ?)
    clampscale(intarray ?, intarray ?, int ?, int ?)
    clampscale(bytearray ?, bytearray ?, unsigned char ?, unsigned char ?)
    """
  return _iulib.clampscale(*args)

def contains_only(*args):
  """
    contains_only(floatarray ?, float ?) -> bool
    contains_only(intarray ?, int ?) -> bool
    contains_only(bytearray ?, unsigned char ?) -> bool
    contains_only(floatarray ?, float ?, float ?) -> bool
    contains_only(intarray ?, int ?, int ?) -> bool
    contains_only(bytearray ?, unsigned char ?, unsigned char ?) -> bool
    """
  return _iulib.contains_only(*args)

def get_dims(*args):
  """
    get_dims( ?, floatarray ?)
    get_dims( ?, intarray ?)
    get_dims( ?, bytearray ?)
    """
  return _iulib.get_dims(*args)

def set_dims(*args):
  """
    set_dims(floatarray ?,  ?)
    set_dims(intarray ?,  ?)
    set_dims(bytearray ?,  ?)
    """
  return _iulib.set_dims(*args)

def sub(*args):
  """
    sub(floatarray ?, float ?)
    sub(float ?, floatarray ?)
    sub(floatarray ?, floatarray ?)
    sub(floatarray ?, floatarray ?, floatarray ?)
    sub(intarray ?, int ?)
    sub(int ?, intarray ?)
    sub(intarray ?, intarray ?)
    sub(intarray ?, intarray ?, intarray ?)
    sub(bytearray ?, unsigned char ?)
    sub(unsigned char ?, bytearray ?)
    sub(bytearray ?, bytearray ?)
    sub(bytearray ?, bytearray ?, bytearray ?)
    """
  return _iulib.sub(*args)

def mul(*args):
  """
    mul(floatarray ?, float ?)
    mul(floatarray ?, floatarray ?)
    mul(floatarray ?, floatarray ?, floatarray ?)
    mul(intarray ?, int ?)
    mul(intarray ?, intarray ?)
    mul(intarray ?, intarray ?, intarray ?)
    mul(bytearray ?, unsigned char ?)
    mul(bytearray ?, bytearray ?)
    mul(bytearray ?, bytearray ?, bytearray ?)
    """
  return _iulib.mul(*args)

def div(*args):
  """
    div(floatarray ?, float ?)
    div(float ?, floatarray ?)
    div(floatarray ?, floatarray ?)
    div(floatarray ?, floatarray ?, floatarray ?)
    div(intarray ?, int ?)
    div(int ?, intarray ?)
    div(intarray ?, intarray ?)
    div(intarray ?, intarray ?, intarray ?)
    div(bytearray ?, unsigned char ?)
    div(unsigned char ?, bytearray ?)
    div(bytearray ?, bytearray ?)
    div(bytearray ?, bytearray ?, bytearray ?)
    """
  return _iulib.div(*args)

def pow(*args):
  """
    pow(floatarray ?, float ?)
    pow(floatarray ?, floatarray ?)
    pow(floatarray ?, floatarray ?, floatarray ?)
    pow(intarray ?, int ?)
    pow(intarray ?, intarray ?)
    pow(intarray ?, intarray ?, intarray ?)
    pow(bytearray ?, unsigned char ?)
    pow(bytearray ?, bytearray ?)
    pow(bytearray ?, bytearray ?, bytearray ?)
    """
  return _iulib.pow(*args)

def max(*args):
  """
    max(floatarray ?) -> float
    max(intarray ?) -> int
    max(bytearray ?) -> unsigned char
    max(floatarray ?, float ?)
    max(floatarray out, floatarray ?)
    max(intarray ?, int ?)
    max(intarray out, intarray ?)
    max(bytearray ?, unsigned char ?)
    max(bytearray out, bytearray ?)
    """
  return _iulib.max(*args)

def min(*args):
  """
    min(floatarray ?) -> float
    min(intarray ?) -> int
    min(bytearray ?) -> unsigned char
    min(floatarray ?, float ?)
    min(floatarray out, floatarray ?)
    min(intarray ?, int ?)
    min(intarray out, intarray ?)
    min(bytearray ?, unsigned char ?)
    min(bytearray out, bytearray ?)
    """
  return _iulib.min(*args)

def neg(*args):
  """
    neg(floatarray ?)
    neg(intarray ?)
    neg(bytearray ?)
    """
  return _iulib.neg(*args)

def abs(*args):
  """
    abs(floatarray ?)
    abs(intarray ?)
    abs(bytearray ?)
    """
  return _iulib.abs(*args)

def log(*args):
  """
    log(floatarray ?)
    log(intarray ?)
    log(bytearray ?)
    """
  return _iulib.log(*args)

def exp(*args):
  """
    exp(floatarray ?)
    exp(intarray ?)
    exp(bytearray ?)
    """
  return _iulib.exp(*args)

def sin(*args):
  """
    sin(floatarray ?)
    sin(intarray ?)
    sin(bytearray ?)
    """
  return _iulib.sin(*args)

def cos(*args):
  """
    cos(floatarray ?)
    cos(intarray ?)
    cos(bytearray ?)
    """
  return _iulib.cos(*args)

class nustring(_object):
    """Proxy of C++ nustring class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nustring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nustring, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> nustring
        __init__(self, int n) -> nustring
        __init__(self, char s) -> nustring
        """
        this = _iulib.new_nustring(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """
        __eq__(self, nustring s) -> bool
        __eq__(self, char s) -> bool
        """
        return _iulib.nustring___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, nustring s) -> bool
        __ne__(self, char s) -> bool
        """
        return _iulib.nustring___ne__(*args)

    def utf8Length(*args):
        """utf8Length(self) -> int"""
        return _iulib.nustring_utf8Length(*args)

    def utf8Decode(*args):
        """utf8Decode(self, char str)"""
        return _iulib.nustring_utf8Decode(*args)

    def utf8Encode(*args):
        """utf8Encode(self, char str)"""
        return _iulib.nustring_utf8Encode(*args)

    def length(*args):
        """length(self) -> int"""
        return _iulib.nustring_length(*args)

    def ord(*args):
        """ord(self, int i) -> int"""
        return _iulib.nustring_ord(*args)

    def put(*args):
        """put(self, int i, int c)"""
        return _iulib.nustring_put(*args)

    def append(*args):
        """append(self, int c)"""
        return _iulib.nustring_append(*args)

    def as_string(*args):
        """as_string(self) -> char"""
        return _iulib.nustring_as_string(*args)

    __swig_destroy__ = _iulib.delete_nustring
    __del__ = lambda self : None;
nustring_swigregister = _iulib.nustring_swigregister
nustring_swigregister(nustring)

class strg(_object):
    """Proxy of C++ strg class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> strg
        __init__(self, int ?) -> strg
        __init__(self, char ?) -> strg
        """
        this = _iulib.new_strg(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args):
        """assign(self, char ?)"""
        return _iulib.strg_assign(*args)

    def c_str(*args):
        """c_str(self) -> char"""
        return _iulib.strg_c_str(*args)

    def length(*args):
        """length(self) -> int"""
        return _iulib.strg_length(*args)

    def at(*args):
        """at(self, int ?) -> char"""
        return _iulib.strg_at(*args)

    __swig_destroy__ = _iulib.delete_strg
    __del__ = lambda self : None;
strg_swigregister = _iulib.strg_swigregister
strg_swigregister(strg)

class ustrg(_object):
    """Proxy of C++ ustrg class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ustrg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ustrg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ustrg
        __init__(self, int ?) -> ustrg
        __init__(self, char ?) -> ustrg
        """
        this = _iulib.new_ustrg(*args)
        try: self.this.append(this)
        except: self.this = this
    def length(*args):
        """length(self) -> int"""
        return _iulib.ustrg_length(*args)

    def clear(*args):
        """clear(self)"""
        return _iulib.ustrg_clear(*args)

    def assign(*args):
        """assign(self, char s)"""
        return _iulib.ustrg_assign(*args)

    def ord(*args):
        """ord(self, int i) -> int"""
        return _iulib.ustrg_ord(*args)

    def as_string(*args):
        """as_string(self) -> char"""
        return _iulib.ustrg_as_string(*args)

    def as_intarray(*args):
        """as_intarray(self,  a)"""
        return _iulib.ustrg_as_intarray(*args)

    __swig_destroy__ = _iulib.delete_ustrg
    __del__ = lambda self : None;
ustrg_swigregister = _iulib.ustrg_swigregister
ustrg_swigregister(ustrg)


def ustrg_of_pyunicode(*args):
  """ustrg_of_pyunicode(ustrg a, PyObject object_)"""
  return _iulib.ustrg_of_pyunicode(*args)

def pyunicode_of_ustrg(*args):
  """pyunicode_of_ustrg(PyObject object_, ustrg a) -> PyObject"""
  return _iulib.pyunicode_of_ustrg(*args)
def unicode2ustrg(a):
    result = ustrg()
    ustrg_of_pyunicode(result,a)
    return result
def ustrg2unicode(a):
    result = unicode()
    result = pyunicode_of_ustrg(result,a)
    return result


def read_image_packed(*args):
  """read_image_packed( ?, char path)"""
  return _iulib.read_image_packed(*args)

def read_image_rgb(*args):
  """read_image_rgb( ?, char path)"""
  return _iulib.read_image_rgb(*args)

def read_image_gray(*args):
  """read_image_gray( ?, char path)"""
  return _iulib.read_image_gray(*args)

def read_image_binary(*args):
  """read_image_binary( ?, char path)"""
  return _iulib.read_image_binary(*args)

def write_image_packed(*args):
  """write_image_packed(char path,  ?)"""
  return _iulib.write_image_packed(*args)

def write_image_rgb(*args):
  """write_image_rgb(char path,  ?)"""
  return _iulib.write_image_rgb(*args)

def write_image_gray(*args):
  """write_image_gray(char path,  ?)"""
  return _iulib.write_image_gray(*args)

def write_image_binary(*args):
  """write_image_binary(char path,  ?)"""
  return _iulib.write_image_binary(*args)
class Tiff(_object):
    """Proxy of C++ Tiff class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tiff, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tiff, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char filename, char mode) -> Tiff
        __init__(self, FILE file, char mode) -> Tiff
        """
        this = _iulib.new_Tiff(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iulib.delete_Tiff
    __del__ = lambda self : None;
    def numPages(*args):
        """numPages(self) -> int"""
        return _iulib.Tiff_numPages(*args)

    def getPageRaw(*args):
        """
        getPageRaw(self,  image, int page, bool gray=True)
        getPageRaw(self,  image, int page)
        getPageRaw(self,  image, int page, bool gray=False)
        getPageRaw(self,  image, int page)
        """
        return _iulib.Tiff_getPageRaw(*args)

    def getPage(*args):
        """
        getPage(self,  image, int page, bool gray=True)
        getPage(self,  image, int page)
        getPage(self,  image, int page, bool gray=False)
        getPage(self,  image, int page)
        """
        return _iulib.Tiff_getPage(*args)

    def setPage(*args):
        """
        setPage(self,  image, int page)
        setPage(self,  image, int page)
        """
        return _iulib.Tiff_setPage(*args)

Tiff_swigregister = _iulib.Tiff_swigregister
Tiff_swigregister(Tiff)


def rawedges(*args):
  """rawedges( edges,  smoothed)"""
  return _iulib.rawedges(*args)

def nonmaxsup(*args):
  """nonmaxsup( out,  gradm,  gradx,  grady)"""
  return _iulib.nonmaxsup(*args)

def hysteresis_thresholding(*args):
  """hysteresis_thresholding( image, float lo, float hi)"""
  return _iulib.hysteresis_thresholding(*args)

def gradients(*args):
  """gradients( gradm,  gradx,  grady,  smoothed)"""
  return _iulib.gradients(*args)

def dilate_1(*args):
  """dilate_1( image, float r)"""
  return _iulib.dilate_1(*args)

def dilate_2(*args):
  """dilate_2( image, float r)"""
  return _iulib.dilate_2(*args)

def dilate_inf(*args):
  """dilate_inf( image, float r)"""
  return _iulib.dilate_inf(*args)

def erode_1(*args):
  """erode_1( image, float r)"""
  return _iulib.erode_1(*args)

def erode_2(*args):
  """erode_2( image, float r)"""
  return _iulib.erode_2(*args)

def erode_inf(*args):
  """erode_inf( image, float r)"""
  return _iulib.erode_inf(*args)

def horn_riley_ridges(*args):
  """horn_riley_ridges( im,  zero,  strength,  angle)"""
  return _iulib.horn_riley_ridges(*args)

def plus_laplacian(*args):
  """plus_laplacian( result,  image)"""
  return _iulib.plus_laplacian(*args)

def zero_crossings(*args):
  """zero_crossings( result,  image)"""
  return _iulib.zero_crossings(*args)

def local_minima(*args):
  """local_minima( result,  image)"""
  return _iulib.local_minima(*args)

def local_maxima(*args):
  """local_maxima( result,  image)"""
  return _iulib.local_maxima(*args)

def gradient_based_corners(*args):
  """gradient_based_corners( image)"""
  return _iulib.gradient_based_corners(*args)

def kitchen_rosenfeld_corners(*args):
  """kitchen_rosenfeld_corners( corners,  image)"""
  return _iulib.kitchen_rosenfeld_corners(*args)

def kitchen_rosenfeld_corners2(*args):
  """kitchen_rosenfeld_corners2( corners,  image)"""
  return _iulib.kitchen_rosenfeld_corners2(*args)

def median_filter(*args):
  """median_filter( image, int rx, int ry)"""
  return _iulib.median_filter(*args)

def complement(*args):
  """complement( image)"""
  return _iulib.complement(*args)

def difference(*args):
  """difference( image,  image2, int dx, int dy)"""
  return _iulib.difference(*args)

def gray_erode(*args):
  """gray_erode( image,  mask, int cx, int cy)"""
  return _iulib.gray_erode(*args)

def gray_dilate(*args):
  """gray_dilate( image,  mask, int cx, int cy)"""
  return _iulib.gray_dilate(*args)

def gray_open(*args):
  """gray_open( image,  mask, int cx, int cy)"""
  return _iulib.gray_open(*args)

def gray_close(*args):
  """gray_close( image,  mask, int cx, int cy)"""
  return _iulib.gray_close(*args)

def propagate_labels(*args):
  """propagate_labels( image)"""
  return _iulib.propagate_labels(*args)

def propagate_labels_to(*args):
  """propagate_labels_to( target,  seed)"""
  return _iulib.propagate_labels_to(*args)

def remove_dontcares(*args):
  """remove_dontcares( image)"""
  return _iulib.remove_dontcares(*args)

def renumber_labels(*args):
  """renumber_labels( image, int start) -> int"""
  return _iulib.renumber_labels(*args)

def simple_recolor(*args):
  """simple_recolor( image)"""
  return _iulib.simple_recolor(*args)

def bounding_boxes(*args):
  """bounding_boxes(rectarray result,  image)"""
  return _iulib.bounding_boxes(*args)

def interesting_colors(*args):
  """interesting_colors(int x) -> int"""
  return _iulib.interesting_colors(*args)

def make_binary(*args):
  """make_binary( image)"""
  return _iulib.make_binary(*args)

def check_binary(*args):
  """check_binary( image)"""
  return _iulib.check_binary(*args)

def binary_invert(*args):
  """binary_invert( image)"""
  return _iulib.binary_invert(*args)

def binary_autoinvert(*args):
  """binary_autoinvert( image)"""
  return _iulib.binary_autoinvert(*args)

def binary_erode_circle(*args):
  """binary_erode_circle( image, int r)"""
  return _iulib.binary_erode_circle(*args)

def binary_dilate_circle(*args):
  """binary_dilate_circle( image, int r)"""
  return _iulib.binary_dilate_circle(*args)

def binary_open_circle(*args):
  """binary_open_circle( image, int r)"""
  return _iulib.binary_open_circle(*args)

def binary_close_circle(*args):
  """binary_close_circle( image, int r)"""
  return _iulib.binary_close_circle(*args)

def binary_erode_rect(*args):
  """binary_erode_rect( image, int rw, int rh)"""
  return _iulib.binary_erode_rect(*args)

def binary_dilate_rect(*args):
  """binary_dilate_rect( image, int rw, int rh)"""
  return _iulib.binary_dilate_rect(*args)

def binary_open_rect(*args):
  """binary_open_rect( image, int rw, int rh)"""
  return _iulib.binary_open_rect(*args)

def binary_close_rect(*args):
  """binary_close_rect( image, int rw, int rh)"""
  return _iulib.binary_close_rect(*args)

def gradx(*args):
  """gradx( image, int x, int y) -> float"""
  return _iulib.gradx(*args)

def grady(*args):
  """grady( image, int x, int y) -> float"""
  return _iulib.grady(*args)

def gradmag(*args):
  """gradmag( image, int x, int y) -> float"""
  return _iulib.gradmag(*args)

def gradang(*args):
  """gradang( image, int x, int y) -> float"""
  return _iulib.gradang(*args)

def compose_at(*args):
  """compose_at( image,  source, int x, int y, int value, int conflict)"""
  return _iulib.compose_at(*args)

def blend(*args):
  """blend( dest,  cond,  iftrue,  iffalse)"""
  return _iulib.blend(*args)

def hist(*args):
  """hist( hist,  image)"""
  return _iulib.hist(*args)

def unpack_rgb(*args):
  """unpack_rgb( r,  g,  b,  rgb)"""
  return _iulib.unpack_rgb(*args)

def pack_rgb(*args):
  """pack_rgb( rgb,  r,  g,  b)"""
  return _iulib.pack_rgb(*args)

def binarize_by_threshold(*args):
  """binarize_by_threshold( image)"""
  return _iulib.binarize_by_threshold(*args)

def rough_rescale(*args):
  """rough_rescale( dst,  src, int w, int h)"""
  return _iulib.rough_rescale(*args)

def bicubic_rescale(*args):
  """bicubic_rescale( dst,  src, int w, int h)"""
  return _iulib.bicubic_rescale(*args)

def thin(*args):
  """thin( uci)"""
  return _iulib.thin(*args)
class IChainTracer(_object):
    """Proxy of C++ IChainTracer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IChainTracer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IChainTracer, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def set_image(*args):
        """set_image(self,  image)"""
        return _iulib.IChainTracer_set_image(*args)

    def clear(*args):
        """clear(self)"""
        return _iulib.IChainTracer_clear(*args)

    def get_chain(*args):
        """
        get_chain(self,  points, bool close=False, int sample=1) -> bool
        get_chain(self,  points, bool close=False) -> bool
        get_chain(self,  points) -> bool
        """
        return _iulib.IChainTracer_get_chain(*args)

    def get_poly(*args):
        """
        get_poly(self,  points, float maxdist=1.0, bool close=False) -> bool
        get_poly(self,  points, float maxdist=1.0) -> bool
        get_poly(self,  points) -> bool
        """
        return _iulib.IChainTracer_get_poly(*args)

    __swig_destroy__ = _iulib.delete_IChainTracer
    __del__ = lambda self : None;
IChainTracer_swigregister = _iulib.IChainTracer_swigregister
IChainTracer_swigregister(IChainTracer)

def nonzero_fractile(*args):
  """
    nonzero_fractile( edges, float frac, int nbins=1000) -> float
    nonzero_fractile( edges, float frac) -> float
    """
  return _iulib.nonzero_fractile(*args)

def canny(*args):
  """
    canny( gradm,  image, float sx, float sy, float frac=0.3, 
        float tlow=2.0, float thigh=4.0)
    canny( gradm,  image, float sx, float sy, float frac=0.3, 
        float tlow=2.0)
    canny( gradm,  image, float sx, float sy, float frac=0.3)
    canny( gradm,  image, float sx, float sy)
    """
  return _iulib.canny(*args)

def brushfire_2(*args):
  """
    brushfire_2( distance, float maxdist=1e30)
    brushfire_2( distance)
    brushfire_2( distance,  source, float maxdist=1e30)
    brushfire_2( distance,  source)
    """
  return _iulib.brushfire_2(*args)

def brushfire_1(*args):
  """
    brushfire_1( distance, float maxdist=1e30)
    brushfire_1( distance)
    brushfire_1( distance,  source, float maxdist=1e30)
    brushfire_1( distance,  source)
    """
  return _iulib.brushfire_1(*args)

def brushfire_inf(*args):
  """
    brushfire_inf( distance, float maxdist=1e30)
    brushfire_inf( distance)
    brushfire_inf( distance,  source, float maxdist=1e30)
    brushfire_inf( distance,  source)
    """
  return _iulib.brushfire_inf(*args)

def brushfire_inf_scaled(*args):
  """
    brushfire_inf_scaled( distance, float sx, float sy, float maxdist=1e38)
    brushfire_inf_scaled( distance, float sx, float sy)
    """
  return _iulib.brushfire_inf_scaled(*args)

def brushfire_2_scaled(*args):
  """
    brushfire_2_scaled( distance, float a, float b, float c, float d, float maxdist=1e38)
    brushfire_2_scaled( distance, float a, float b, float c, float d)
    """
  return _iulib.brushfire_2_scaled(*args)

def gauss1d(*args):
  """
    gauss1d(floatarray out, floatarray in, float sigma)
    gauss1d(bytearray out, bytearray in, float sigma)
    gauss1d(floatarray v, float sigma)
    gauss1d(bytearray v, float sigma)
    """
  return _iulib.gauss1d(*args)

def gauss2d(*args):
  """
    gauss2d(floatarray a, float sx, float sy)
    gauss2d(bytearray a, float sx, float sy)
    """
  return _iulib.gauss2d(*args)

def minshift(*args):
  """
    minshift( image,  image2, int dx, int dy, byte offset=0)
    minshift( image,  image2, int dx, int dy)
    """
  return _iulib.minshift(*args)

def maxshift(*args):
  """
    maxshift( image,  image2, int dx, int dy, byte offset=0)
    maxshift( image,  image2, int dx, int dy)
    """
  return _iulib.maxshift(*args)

def label_components(*args):
  """
    label_components( image, bool four_connected=False) -> int
    label_components( image) -> int
    """
  return _iulib.label_components(*args)

def rotate_direct_sample(*args):
  """
    rotate_direct_sample(floatarray out, floatarray in, float angle, float cx, 
        float cy)
    rotate_direct_sample(intarray out, intarray in, float angle, float cx, float cy)
    rotate_direct_sample(bytearray out, bytearray in, float angle, float cx, 
        float cy)
    """
  return _iulib.rotate_direct_sample(*args)

def rotate_direct_interpolate(*args):
  """
    rotate_direct_interpolate(floatarray out, floatarray in, float angle, float cx, 
        float cy)
    rotate_direct_interpolate(intarray out, intarray in, float angle, float cx, float cy)
    rotate_direct_interpolate(bytearray out, bytearray in, float angle, float cx, 
        float cy)
    """
  return _iulib.rotate_direct_interpolate(*args)

def scale_sample(*args):
  """
    scale_sample(floatarray out, floatarray in, float sx, float sy)
    scale_sample(floatarray out, floatarray in, int nx, int ny)
    scale_sample(intarray out, intarray in, float sx, float sy)
    scale_sample(intarray out, intarray in, int nx, int ny)
    scale_sample(bytearray out, bytearray in, float sx, float sy)
    scale_sample(bytearray out, bytearray in, int nx, int ny)
    """
  return _iulib.scale_sample(*args)

def scale_interpolate(*args):
  """
    scale_interpolate(floatarray out, floatarray in, float sx, float sy)
    scale_interpolate(floatarray out, floatarray in, int nx, int ny)
    scale_interpolate(intarray out, intarray in, float sx, float sy)
    scale_interpolate(intarray out, intarray in, int nx, int ny)
    scale_interpolate(bytearray out, bytearray in, float sx, float sy)
    scale_interpolate(bytearray out, bytearray in, int nx, int ny)
    """
  return _iulib.scale_interpolate(*args)

def maxdifference(*args):
  """
    maxdifference( image,  image2, int cx, int cy) -> int
    maxdifference( image,  image2, int cx=0) -> int
    maxdifference( image,  image2) -> int
    """
  return _iulib.maxdifference(*args)

def binary_and(*args):
  """
    binary_and( image,  image2, int dx=0, int dy=0)
    binary_and( image,  image2, int dx=0)
    binary_and( image,  image2)
    """
  return _iulib.binary_and(*args)

def binary_or(*args):
  """
    binary_or( image,  image2, int dx=0, int dy=0)
    binary_or( image,  image2, int dx=0)
    binary_or( image,  image2)
    """
  return _iulib.binary_or(*args)

def getd0(*args):
  """
    getd0(floatarray image, floatarray slice, int index)
    getd0(floatarray image, bytearray slice, int index)
    getd0(bytearray image, floatarray slice, int index)
    getd0(bytearray image, bytearray slice, int index)
    """
  return _iulib.getd0(*args)

def getd1(*args):
  """
    getd1(floatarray image, floatarray slice, int index)
    getd1(floatarray image, bytearray slice, int index)
    getd1(bytearray image, floatarray slice, int index)
    getd1(bytearray image, bytearray slice, int index)
    """
  return _iulib.getd1(*args)

def putd0(*args):
  """
    putd0(floatarray image, floatarray slice, int index)
    putd0(floatarray image, bytearray slice, int index)
    putd0(bytearray image, floatarray slice, int index)
    putd0(bytearray image, bytearray slice, int index)
    """
  return _iulib.putd0(*args)

def putd1(*args):
  """
    putd1(floatarray image, floatarray slice, int index)
    putd1(floatarray image, bytearray slice, int index)
    putd1(bytearray image, floatarray slice, int index)
    putd1(bytearray image, bytearray slice, int index)
    """
  return _iulib.putd1(*args)

def xref(*args):
  """
    xref(floatarray a, int x, int y) -> float
    xref(intarray a, int x, int y) -> int
    xref(bytearray a, int x, int y) -> unsigned char
    """
  return _iulib.xref(*args)

def bilin(*args):
  """
    bilin(floatarray a, float x, float y) -> float
    bilin(intarray a, float x, float y) -> int
    bilin(bytearray a, float x, float y) -> unsigned char
    """
  return _iulib.bilin(*args)

def addscaled(*args):
  """
    addscaled(floatarray ?, floatarray ?, double ?)
    addscaled(intarray ?, intarray ?, double ?)
    addscaled(bytearray ?, bytearray ?, double ?)
    addscaled(floatarray ?, floatarray ?, float ?, int ?, int ?)
    addscaled(intarray ?, intarray ?, float ?, int ?, int ?)
    addscaled(bytearray ?, bytearray ?, float ?, int ?, int ?)
    """
  return _iulib.addscaled(*args)

def tighten(*args):
  """
    tighten(floatarray image)
    tighten(intarray image)
    tighten(bytearray image)
    """
  return _iulib.tighten(*args)

def circ_by(*args):
  """
    circ_by(floatarray image, int dx, int dy, float value=0)
    circ_by(floatarray image, int dx, int dy)
    circ_by(intarray image, int dx, int dy, int value=0)
    circ_by(intarray image, int dx, int dy)
    circ_by(bytearray image, int dx, int dy, unsigned char value=0)
    circ_by(bytearray image, int dx, int dy)
    """
  return _iulib.circ_by(*args)

def shift_by(*args):
  """
    shift_by(floatarray image, int dx, int dy, float value=0)
    shift_by(floatarray image, int dx, int dy)
    shift_by(intarray image, int dx, int dy, int value=0)
    shift_by(intarray image, int dx, int dy)
    shift_by(bytearray image, int dx, int dy, unsigned char value=0)
    shift_by(bytearray image, int dx, int dy)
    """
  return _iulib.shift_by(*args)

def pad_by(*args):
  """
    pad_by(floatarray image, int px, int py, float value=0)
    pad_by(floatarray image, int px, int py)
    pad_by(intarray image, int px, int py, int value=0)
    pad_by(intarray image, int px, int py)
    pad_by(bytearray image, int px, int py, unsigned char value=0)
    pad_by(bytearray image, int px, int py)
    """
  return _iulib.pad_by(*args)

def erase_boundary(*args):
  """
    erase_boundary(floatarray ?, int ?, int ?, float ?)
    erase_boundary(intarray ?, int ?, int ?, int ?)
    erase_boundary(bytearray ?, int ?, int ?, unsigned char ?)
    """
  return _iulib.erase_boundary(*args)

def extract_subimage(*args):
  """
    extract_subimage(floatarray subimage, floatarray image, int x0, int y0, 
        int x1, int y1)
    extract_subimage(intarray subimage, intarray image, int x0, int y0, 
        int x1, int y1)
    extract_subimage(bytearray subimage, bytearray image, int x0, int y0, 
        int x1, int y1)
    extract_subimage(bytearray subimage, floatarray image, int x0, int y0, 
        int x1, int y1)
    extract_subimage(bytearray subimage, intarray image, int x0, int y0, 
        int x1, int y1)
    extract_subimage(intarray subimage, bytearray image, int x0, int y0, 
        int x1, int y1)
    extract_subimage(intarray subimage, floatarray image, int x0, int y0, 
        int x1, int y1)
    extract_subimage(floatarray subimage, intarray image, int x0, int y0, 
        int x1, int y1)
    extract_subimage(floatarray subimage, bytearray image, int x0, int y0, 
        int x1, int y1)
    """
  return _iulib.extract_subimage(*args)

def extract_bat(*args):
  """
    extract_bat(floatarray subimage, floatarray image, int x0, int y0, 
        int x1, int y1, float dflt)
    extract_bat(intarray subimage, intarray image, int x0, int y0, 
        int x1, int y1, int dflt)
    extract_bat(bytearray subimage, bytearray image, int x0, int y0, 
        int x1, int y1, int dflt)
    extract_bat(bytearray subimage, floatarray image, int x0, int y0, 
        int x1, int y1, float dflt)
    extract_bat(bytearray subimage, intarray image, int x0, int y0, 
        int x1, int y1, int dflt)
    extract_bat(intarray subimage, bytearray image, int x0, int y0, 
        int x1, int y1, int dflt)
    extract_bat(intarray subimage, floatarray image, int x0, int y0, 
        int x1, int y1, float dflt)
    extract_bat(floatarray subimage, intarray image, int x0, int y0, 
        int x1, int y1, int dflt)
    extract_bat(floatarray subimage, bytearray image, int x0, int y0, 
        int x1, int y1, int dflt)
    """
  return _iulib.extract_bat(*args)

def resize_to(*args):
  """
    resize_to(floatarray image, int w, int h, float value=0)
    resize_to(floatarray image, int w, int h)
    resize_to(intarray image, int w, int h, int value=0)
    resize_to(intarray image, int w, int h)
    resize_to(bytearray image, int w, int h, unsigned char value=0)
    resize_to(bytearray image, int w, int h)
    """
  return _iulib.resize_to(*args)

def ifelse(*args):
  """
    ifelse(floatarray dest, floatarray cond, floatarray iftrue, 
        floatarray iffalse)
    ifelse(floatarray dest, bytearray cond, floatarray iftrue, 
        floatarray iffalse)
    ifelse(bytearray dest, bytearray cond, bytearray iftrue, bytearray iffalse)
    """
  return _iulib.ifelse(*args)

def linearly_transform_intensity(*args):
  """
    linearly_transform_intensity(floatarray image, float m, float b, float lo, float hi)
    linearly_transform_intensity(intarray image, float m, float b, float lo, float hi)
    linearly_transform_intensity(bytearray image, float m, float b, float lo, float hi)
    """
  return _iulib.linearly_transform_intensity(*args)

def gamma_transform(*args):
  """
    gamma_transform(floatarray image, float gamma, float c, float lo, float hi)
    gamma_transform(intarray image, float gamma, float c, float lo, float hi)
    gamma_transform(bytearray image, float gamma, float c, float lo, float hi)
    """
  return _iulib.gamma_transform(*args)

def expand_range(*args):
  """
    expand_range(floatarray image, float lo, float hi)
    expand_range(intarray image, float lo, float hi)
    expand_range(bytearray image, float lo, float hi)
    """
  return _iulib.expand_range(*args)

def valleys(*args):
  """
    valleys( locations,  v, int minsize=0, int maxsize=1 << 30, 
        float sigma=0.0)
    valleys( locations,  v, int minsize=0, int maxsize=1 << 30)
    valleys( locations,  v, int minsize=0)
    valleys( locations,  v)
    """
  return _iulib.valleys(*args)

def peaks(*args):
  """
    peaks( locations,  v, int minsize=0, int maxsize=1 << 30, 
        float sigma=0.0)
    peaks( locations,  v, int minsize=0, int maxsize=1 << 30)
    peaks( locations,  v, int minsize=0)
    peaks( locations,  v)
    """
  return _iulib.peaks(*args)

def split_rgb(*args):
  """
    split_rgb(bytearray r, bytearray g, bytearray b, bytearray rgb)
    split_rgb(intarray r, intarray g, intarray b, intarray rgb)
    split_rgb(floatarray r, floatarray g, floatarray b, floatarray rgb)
    """
  return _iulib.split_rgb(*args)

def combine_rgb(*args):
  """
    combine_rgb(bytearray rgb, bytearray r, bytearray g, bytearray b)
    combine_rgb(intarray rgb, intarray r, intarray g, intarray b)
    combine_rgb(floatarray rgb, floatarray r, floatarray g, floatarray b)
    """
  return _iulib.combine_rgb(*args)

def fill_rect(*args):
  """
    fill_rect(bytearray out, int x0, int y0, int x1, int y1, unsigned char value)
    fill_rect(bytearray out, rectangle r, unsigned char value)
    fill_rect(intarray out, int x0, int y0, int x1, int y1, int value)
    fill_rect(intarray out, rectangle r, int value)
    fill_rect(floatarray out, int x0, int y0, int x1, int y1, float value)
    fill_rect(floatarray out, rectangle r, float value)
    """
  return _iulib.fill_rect(*args)

def math2raster(*args):
  """
    math2raster(bytearray out, bytearray in)
    math2raster(bytearray out)
    math2raster(intarray out, intarray in)
    math2raster(intarray out)
    math2raster(floatarray out, floatarray in)
    math2raster(floatarray out)
    """
  return _iulib.math2raster(*args)

def raster2math(*args):
  """
    raster2math(bytearray out, bytearray in)
    raster2math(bytearray out)
    raster2math(intarray out, intarray in)
    raster2math(intarray out)
    raster2math(floatarray out, floatarray in)
    raster2math(floatarray out)
    """
  return _iulib.raster2math(*args)

def crop(*args):
  """
    crop(bytearray result, bytearray source, int x, int y, int w, 
        int h)
    crop(bytearray result, bytearray source, rectangle r)
    crop(bytearray a, rectangle box)
    crop(intarray result, intarray source, int x, int y, int w, 
        int h)
    crop(intarray result, intarray source, rectangle r)
    crop(intarray a, rectangle box)
    crop(floatarray result, floatarray source, int x, int y, 
        int w, int h)
    crop(floatarray result, floatarray source, rectangle r)
    crop(floatarray a, rectangle box)
    """
  return _iulib.crop(*args)

def transpose(*args):
  """
    transpose(bytearray a)
    transpose(intarray a)
    transpose(floatarray a)
    """
  return _iulib.transpose(*args)

def replace_values(*args):
  """
    replace_values(bytearray a, unsigned char from, unsigned char to)
    replace_values(intarray a, int from, int to)
    replace_values(floatarray a, float from, float to)
    """
  return _iulib.replace_values(*args)

def rescale(*args):
  """
    rescale( dst,  src, int w, int h)
    rescale( dst,  src, int w, int h)
    """
  return _iulib.rescale(*args)

def rescale_to_width(*args):
  """
    rescale_to_width( dst,  src, int w)
    rescale_to_width( dst,  src, int w)
    """
  return _iulib.rescale_to_width(*args)

def rescale_to_height(*args):
  """
    rescale_to_height( dst,  src, int h)
    rescale_to_height( dst,  src, int h)
    """
  return _iulib.rescale_to_height(*args)


def chaintracer_(*args):
  """chaintracer_( image) -> IChainTracer"""
  return _iulib.chaintracer_(*args)
class BitImage(_object):
    """Proxy of C++ BitImage class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitImage, name)
    __repr__ = _swig_repr
    def init(*args):
        """init(self)"""
        return _iulib.BitImage_init(*args)

    def clear(*args):
        """clear(self)"""
        return _iulib.BitImage_clear(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> BitImage
        __init__(self, int w, int h) -> BitImage
        """
        this = _iulib.new_BitImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iulib.delete_BitImage
    __del__ = lambda self : None;
    def megabytes(*args):
        """megabytes(self) -> double"""
        return _iulib.BitImage_megabytes(*args)

    def copy(*args):
        """copy(self, BitImage other)"""
        return _iulib.BitImage_copy(*args)

    def rank(*args):
        """rank(self) -> int"""
        return _iulib.BitImage_rank(*args)

    def dim(*args):
        """dim(self, int i) -> int"""
        return _iulib.BitImage_dim(*args)

    def resize(*args):
        """resize(self, int w, int h)"""
        return _iulib.BitImage_resize(*args)

    def get_line(*args):
        """get_line(self, int i) -> word32"""
        return _iulib.BitImage_get_line(*args)

    def at(*args):
        """at(self, int i, int j) -> bool"""
        return _iulib.BitImage_at(*args)

    def __call__(*args):
        """__call__(self, int i, int j) -> bool"""
        return _iulib.BitImage___call__(*args)

    def set_bit(*args):
        """set_bit(self, int i, int j)"""
        return _iulib.BitImage_set_bit(*args)

    def clear_bit(*args):
        """clear_bit(self, int i, int j)"""
        return _iulib.BitImage_clear_bit(*args)

    def set(*args):
        """set(self, int i, int j, bool value)"""
        return _iulib.BitImage_set(*args)

    def fill(*args):
        """fill(self, bool value)"""
        return _iulib.BitImage_fill(*args)

BitImage_swigregister = _iulib.BitImage_swigregister
BitImage_swigregister(BitImage)

class IBlit1D(_object):
    """Proxy of C++ IBlit1D class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBlit1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBlit1D, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def blit1d(*args):
        """
        blit1d(self, word32 dest, int enddestbits, word32 mask, int endmaskbits, 
            int shift, BlitOp op)
        """
        return _iulib.IBlit1D_blit1d(*args)

    __swig_destroy__ = _iulib.delete_IBlit1D
    __del__ = lambda self : None;
IBlit1D_swigregister = _iulib.IBlit1D_swigregister
IBlit1D_swigregister(IBlit1D)

class IBlit2D(_object):
    """Proxy of C++ IBlit2D class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBlit2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBlit2D, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def blit2d(*args):
        """
        blit2d(self, BitImage image, BitImage other, int dx, int dy, BlitOp op, 
            BlitBoundary bop)
        """
        return _iulib.IBlit2D_blit2d(*args)

    def blit1d(*args):
        """blit1d(self) -> IBlit1D"""
        return _iulib.IBlit2D_blit1d(*args)

    def getBlitCount(*args):
        """getBlitCount(self) -> int"""
        return _iulib.IBlit2D_getBlitCount(*args)

    __swig_destroy__ = _iulib.delete_IBlit2D
    __del__ = lambda self : None;
IBlit2D_swigregister = _iulib.IBlit2D_swigregister
IBlit2D_swigregister(IBlit2D)


def make_Blit1DBitwise(*args):
  """make_Blit1DBitwise() -> IBlit1D"""
  return _iulib.make_Blit1DBitwise(*args)

def make_Blit1DWordwise(*args):
  """make_Blit1DWordwise() -> IBlit1D"""
  return _iulib.make_Blit1DWordwise(*args)

def make_Blit2D(*args):
  """make_Blit2D(IBlit1D ?) -> IBlit2D"""
  return _iulib.make_Blit2D(*args)

def make_Blit1DBitwiseC(*args):
  """make_Blit1DBitwiseC() -> IBlit1D"""
  return _iulib.make_Blit1DBitwiseC(*args)

def make_Blit1DWordwiseC(*args):
  """make_Blit1DWordwiseC() -> IBlit1D"""
  return _iulib.make_Blit1DWordwiseC(*args)

def bits_move(*args):
  """bits_move(BitImage dest, BitImage src)"""
  return _iulib.bits_move(*args)

def bits_non_empty(*args):
  """bits_non_empty(BitImage image) -> bool"""
  return _iulib.bits_non_empty(*args)

def bits_resample(*args):
  """bits_resample( image, BitImage bits, int vis_scale)"""
  return _iulib.bits_resample(*args)

def bits_reduce2_and(*args):
  """bits_reduce2_and(BitImage out, BitImage image)"""
  return _iulib.bits_reduce2_and(*args)

def bits_flip_v(*args):
  """bits_flip_v(BitImage image)"""
  return _iulib.bits_flip_v(*args)

def bits_flip_h(*args):
  """bits_flip_h(BitImage image)"""
  return _iulib.bits_flip_h(*args)

def bits_rotate_rect(*args):
  """bits_rotate_rect(BitImage image, int angle)"""
  return _iulib.bits_rotate_rect(*args)

def bits_invert(*args):
  """bits_invert(BitImage image)"""
  return _iulib.bits_invert(*args)

def bits_rotate(*args):
  """bits_rotate(BitImage image, float angle)"""
  return _iulib.bits_rotate(*args)

def bits_erode_rect(*args):
  """bits_erode_rect(BitImage image, int rx, int ry)"""
  return _iulib.bits_erode_rect(*args)

def bits_dilate_rect(*args):
  """bits_dilate_rect(BitImage image, int rx, int ry)"""
  return _iulib.bits_dilate_rect(*args)

def bits_open_rect(*args):
  """bits_open_rect(BitImage image, int rx, int ry)"""
  return _iulib.bits_open_rect(*args)

def bits_close_rect(*args):
  """bits_close_rect(BitImage image, int rx, int ry)"""
  return _iulib.bits_close_rect(*args)

def bits_circ_mask(*args):
  """bits_circ_mask(BitImage image, int r)"""
  return _iulib.bits_circ_mask(*args)

def bits_erode_circ(*args):
  """bits_erode_circ(BitImage image, int r)"""
  return _iulib.bits_erode_circ(*args)

def bits_dilate_circ(*args):
  """bits_dilate_circ(BitImage image, int r)"""
  return _iulib.bits_dilate_circ(*args)

def bits_open_circ(*args):
  """bits_open_circ(BitImage image, int r)"""
  return _iulib.bits_open_circ(*args)

def bits_close_circ(*args):
  """bits_close_circ(BitImage image, int r)"""
  return _iulib.bits_close_circ(*args)

def bits_erode_rrect(*args):
  """bits_erode_rrect(BitImage image, int w, int h, double angle)"""
  return _iulib.bits_erode_rrect(*args)

def bits_dilate_rrect(*args):
  """bits_dilate_rrect(BitImage image, int w, int h, double angle)"""
  return _iulib.bits_dilate_rrect(*args)

def bits_open_rrect(*args):
  """bits_open_rrect(BitImage image, int w, int h, double angle)"""
  return _iulib.bits_open_rrect(*args)

def bits_close_rrect(*args):
  """bits_close_rrect(BitImage image, int w, int h, double angle)"""
  return _iulib.bits_close_rrect(*args)

def bits_erode_line(*args):
  """bits_erode_line(BitImage image, int r, double angle, int rp)"""
  return _iulib.bits_erode_line(*args)

def bits_dilate_line(*args):
  """bits_dilate_line(BitImage image, int r, double angle, int rp)"""
  return _iulib.bits_dilate_line(*args)

def bits_open_line(*args):
  """bits_open_line(BitImage image, int r, double angle, int rp)"""
  return _iulib.bits_open_line(*args)

def bits_close_line(*args):
  """bits_close_line(BitImage image, int r, double angle, int rp)"""
  return _iulib.bits_close_line(*args)
class RLERun(_object):
    """Proxy of C++ RLERun class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RLERun, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RLERun, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _iulib.RLERun_start_set
    __swig_getmethods__["start"] = _iulib.RLERun_start_get
    if _newclass:start = _swig_property(_iulib.RLERun_start_get, _iulib.RLERun_start_set)
    __swig_setmethods__["end"] = _iulib.RLERun_end_set
    __swig_getmethods__["end"] = _iulib.RLERun_end_get
    if _newclass:end = _swig_property(_iulib.RLERun_end_get, _iulib.RLERun_end_set)
    def __init__(self, *args): 
        """
        __init__(self) -> RLERun
        __init__(self, short start, short end) -> RLERun
        """
        this = _iulib.new_RLERun(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(*args):
        """__add__(self, int offset) -> RLERun"""
        return _iulib.RLERun___add__(*args)

    def __iadd__(*args):
        """__iadd__(self, int offset)"""
        return _iulib.RLERun___iadd__(*args)

    def contains(*args):
        """contains(self, RLERun other) -> bool"""
        return _iulib.RLERun_contains(*args)

    def overlaps(*args):
        """overlaps(self, RLERun other) -> bool"""
        return _iulib.RLERun_overlaps(*args)

    def before(*args):
        """before(self, RLERun other) -> bool"""
        return _iulib.RLERun_before(*args)

    def after(*args):
        """after(self, RLERun other) -> bool"""
        return _iulib.RLERun_after(*args)

    __swig_destroy__ = _iulib.delete_RLERun
    __del__ = lambda self : None;
RLERun_swigregister = _iulib.RLERun_swigregister
RLERun_swigregister(RLERun)

def bits_convert(*args):
  """
    bits_convert(BitImage bimage,  image)
    bits_convert(BitImage bimage,  image)
    bits_convert( image, BitImage bimage)
    bits_convert( image, BitImage bimage)
    """
  return _iulib.bits_convert(*args)

def bits_count_rect(*args):
  """
    bits_count_rect(BitImage image, int x0=0, int y0=0, int x1=32000, int y1=32000) -> int
    bits_count_rect(BitImage image, int x0=0, int y0=0, int x1=32000) -> int
    bits_count_rect(BitImage image, int x0=0, int y0=0) -> int
    bits_count_rect(BitImage image, int x0=0) -> int
    bits_count_rect(BitImage image) -> int
    """
  return _iulib.bits_count_rect(*args)

def bits_set_rect(*args):
  """
    bits_set_rect(BitImage image, int x0=0, int y0=0, int x1=32000, int y1=32000, 
        bool value=False)
    bits_set_rect(BitImage image, int x0=0, int y0=0, int x1=32000, int y1=32000)
    bits_set_rect(BitImage image, int x0=0, int y0=0, int x1=32000)
    bits_set_rect(BitImage image, int x0=0, int y0=0)
    bits_set_rect(BitImage image, int x0=0)
    bits_set_rect(BitImage image)
    """
  return _iulib.bits_set_rect(*args)

def bits_resample_normed(*args):
  """
    bits_resample_normed( image, BitImage bits, int vis_scale, bool norm=True)
    bits_resample_normed( image, BitImage bits, int vis_scale)
    """
  return _iulib.bits_resample_normed(*args)

def bits_transpose(*args):
  """
    bits_transpose(BitImage out, BitImage in)
    bits_transpose(BitImage image)
    """
  return _iulib.bits_transpose(*args)

def bits_set(*args):
  """
    bits_set(BitImage image, BitImage other, int dx=0, int dy=0)
    bits_set(BitImage image, BitImage other, int dx=0)
    bits_set(BitImage image, BitImage other)
    """
  return _iulib.bits_set(*args)

def bits_setnot(*args):
  """
    bits_setnot(BitImage image, BitImage other, int dx=0, int dy=0)
    bits_setnot(BitImage image, BitImage other, int dx=0)
    bits_setnot(BitImage image, BitImage other)
    """
  return _iulib.bits_setnot(*args)

def bits_and(*args):
  """
    bits_and(BitImage image, BitImage other, int dx=0, int dy=0)
    bits_and(BitImage image, BitImage other, int dx=0)
    bits_and(BitImage image, BitImage other)
    """
  return _iulib.bits_and(*args)

def bits_or(*args):
  """
    bits_or(BitImage image, BitImage other, int dx=0, int dy=0)
    bits_or(BitImage image, BitImage other, int dx=0)
    bits_or(BitImage image, BitImage other)
    """
  return _iulib.bits_or(*args)

def bits_andnot(*args):
  """
    bits_andnot(BitImage image, BitImage other, int dx=0, int dy=0)
    bits_andnot(BitImage image, BitImage other, int dx=0)
    bits_andnot(BitImage image, BitImage other)
    """
  return _iulib.bits_andnot(*args)

def bits_ornot(*args):
  """
    bits_ornot(BitImage image, BitImage other, int dx=0, int dy=0)
    bits_ornot(BitImage image, BitImage other, int dx=0)
    bits_ornot(BitImage image, BitImage other)
    """
  return _iulib.bits_ornot(*args)

def bits_xor(*args):
  """
    bits_xor(BitImage image, BitImage other, int dx=0, int dy=0)
    bits_xor(BitImage image, BitImage other, int dx=0)
    bits_xor(BitImage image, BitImage other)
    """
  return _iulib.bits_xor(*args)

def bits_skew(*args):
  """
    bits_skew(BitImage image, float skew, float center=0.0, bool backwards=False)
    bits_skew(BitImage image, float skew, float center=0.0)
    bits_skew(BitImage image, float skew)
    """
  return _iulib.bits_skew(*args)

def bits_erode_mask(*args):
  """
    bits_erode_mask(BitImage image, BitImage element, int cx=DFLTC, int cy=DFLTC)
    bits_erode_mask(BitImage image, BitImage element, int cx=DFLTC)
    bits_erode_mask(BitImage image, BitImage element)
    """
  return _iulib.bits_erode_mask(*args)

def bits_dilate_mask(*args):
  """
    bits_dilate_mask(BitImage image, BitImage element, int cx=DFLTC, int cy=DFLTC)
    bits_dilate_mask(BitImage image, BitImage element, int cx=DFLTC)
    bits_dilate_mask(BitImage image, BitImage element)
    """
  return _iulib.bits_dilate_mask(*args)

def bits_open_mask(*args):
  """
    bits_open_mask(BitImage image, BitImage element, int cx=DFLTC, int cy=DFLTC)
    bits_open_mask(BitImage image, BitImage element, int cx=DFLTC)
    bits_open_mask(BitImage image, BitImage element)
    """
  return _iulib.bits_open_mask(*args)

def bits_close_mask(*args):
  """
    bits_close_mask(BitImage image, BitImage element, int cx=DFLTC, int cy=DFLTC)
    bits_close_mask(BitImage image, BitImage element, int cx=DFLTC)
    bits_close_mask(BitImage image, BitImage element)
    """
  return _iulib.bits_close_mask(*args)

def bits_mask_hitmiss(*args):
  """
    bits_mask_hitmiss(BitImage image, BitImage element, int cx=DFLTC, int cy=DFLTC)
    bits_mask_hitmiss(BitImage image, BitImage element, int cx=DFLTC)
    bits_mask_hitmiss(BitImage image, BitImage element)
    bits_mask_hitmiss(BitImage image, BitImage hit, BitImage miss, int cx=DFLTC, 
        int cy=DFLTC)
    bits_mask_hitmiss(BitImage image, BitImage hit, BitImage miss, int cx=DFLTC)
    bits_mask_hitmiss(BitImage image, BitImage hit, BitImage miss)
    """
  return _iulib.bits_mask_hitmiss(*args)


def trim_line(*args):
  """trim_line(RLELine line, int l)"""
  return _iulib.trim_line(*args)
class RLEImage(_object):
    """Proxy of C++ RLEImage class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RLEImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RLEImage, name)
    __repr__ = _swig_repr
    def doesNotAlias(*args):
        """doesNotAlias(self, RLEImage other) -> bool"""
        return _iulib.RLEImage_doesNotAlias(*args)

    def dim(*args):
        """dim(self, int d) -> int"""
        return _iulib.RLEImage_dim(*args)

    def line(*args):
        """line(self, int i) -> RLELine"""
        return _iulib.RLEImage_line(*args)

    def nlines(*args):
        """nlines(self) -> int"""
        return _iulib.RLEImage_nlines(*args)

    def take(*args):
        """take(self, RLEImage in)"""
        return _iulib.RLEImage_take(*args)

    def equals(*args):
        """equals(self, RLEImage b) -> bool"""
        return _iulib.RLEImage_equals(*args)

    def number_of_runs(*args):
        """number_of_runs(self) -> int"""
        return _iulib.RLEImage_number_of_runs(*args)

    def megabytes(*args):
        """megabytes(self) -> double"""
        return _iulib.RLEImage_megabytes(*args)

    def resize(*args):
        """
        resize(self, int d0, int d1, int prealloc=0)
        resize(self, int d0, int d1)
        """
        return _iulib.RLEImage_resize(*args)

    def fill(*args):
        """fill(self, bool value)"""
        return _iulib.RLEImage_fill(*args)

    def copy(*args):
        """copy(self, RLEImage other)"""
        return _iulib.RLEImage_copy(*args)

    def at(*args):
        """at(self, int x, int y) -> int"""
        return _iulib.RLEImage_at(*args)

    def put(*args):
        """put(self, int x, int y, bool p)"""
        return _iulib.RLEImage_put(*args)

    def verify(*args):
        """verify(self)"""
        return _iulib.RLEImage_verify(*args)

    def __init__(self, *args): 
        """__init__(self) -> RLEImage"""
        this = _iulib.new_RLEImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iulib.delete_RLEImage
    __del__ = lambda self : None;
RLEImage_swigregister = _iulib.RLEImage_swigregister
RLEImage_swigregister(RLEImage)

def verify_line(*args):
  """
    verify_line(RLELine line, int l=(1 << 30))
    verify_line(RLELine line)
    """
  return _iulib.verify_line(*args)


def rle_runlength_statistics(*args):
  """rle_runlength_statistics( on,  off, RLEImage image)"""
  return _iulib.rle_runlength_statistics(*args)

def rle_shift(*args):
  """rle_shift(RLEImage image, int d0, int d1)"""
  return _iulib.rle_shift(*args)

def rle_rotate_rect(*args):
  """rle_rotate_rect(RLEImage image, int angle)"""
  return _iulib.rle_rotate_rect(*args)

def rle_skew(*args):
  """rle_skew(RLEImage image, float skew, float center)"""
  return _iulib.rle_skew(*args)

def rle_rotate(*args):
  """rle_rotate(RLEImage image, float angle)"""
  return _iulib.rle_rotate(*args)

def rle_flip_v(*args):
  """rle_flip_v(RLEImage image)"""
  return _iulib.rle_flip_v(*args)

def rle_invert(*args):
  """rle_invert(RLEImage image)"""
  return _iulib.rle_invert(*args)

def rle_and(*args):
  """rle_and(RLEImage image, RLEImage mask, int d0, int d1)"""
  return _iulib.rle_and(*args)

def rle_or(*args):
  """rle_or(RLEImage image, RLEImage mask, int d0, int d1)"""
  return _iulib.rle_or(*args)

def rle_dilate_rect(*args):
  """rle_dilate_rect(RLEImage image, int r0, int r1)"""
  return _iulib.rle_dilate_rect(*args)

def rle_erode_rect(*args):
  """rle_erode_rect(RLEImage image, int r0, int r1)"""
  return _iulib.rle_erode_rect(*args)

def rle_open_rect(*args):
  """rle_open_rect(RLEImage image, int r0, int r1)"""
  return _iulib.rle_open_rect(*args)

def rle_close_rect(*args):
  """rle_close_rect(RLEImage image, int r0, int r1)"""
  return _iulib.rle_close_rect(*args)

def rle_circular_mask(*args):
  """rle_circular_mask(RLEImage image, int r)"""
  return _iulib.rle_circular_mask(*args)

def rle_erode_mask(*args):
  """rle_erode_mask(RLEImage image, RLEImage mask, int r0, int r1)"""
  return _iulib.rle_erode_mask(*args)

def rle_bounding_boxes(*args):
  """rle_bounding_boxes(rectarray boxes, RLEImage image) -> int"""
  return _iulib.rle_bounding_boxes(*args)

def rle_read(*args):
  """rle_read(RLEImage ?, char ?)"""
  return _iulib.rle_read(*args)

def rle_write(*args):
  """rle_write(char ?, RLEImage ?)"""
  return _iulib.rle_write(*args)

def rle_dshow(*args):
  """rle_dshow(RLEImage image, char spec)"""
  return _iulib.rle_dshow(*args)

def rle_debug(*args):
  """rle_debug(RLEImage image)"""
  return _iulib.rle_debug(*args)

def dactive(*args):
  """dactive() -> bool"""
  return _iulib.dactive(*args)

def dclear(*args):
  """dclear(int ?)"""
  return _iulib.dclear(*args)

def dflush(*args):
  """dflush()"""
  return _iulib.dflush(*args)

def dwait(*args):
  """dwait()"""
  return _iulib.dwait(*args)

def dclose(*args):
  """dclose()"""
  return _iulib.dclose(*args)

def dactivate(*args):
  """dactivate(bool flag) -> bool"""
  return _iulib.dactivate(*args)

def dsection_set(*args):
  """dsection_set(char section) -> char"""
  return _iulib.dsection_set(*args)

def dgraphics_set(*args):
  """dgraphics_set(char s)"""
  return _iulib.dgraphics_set(*args)

def return99(*args):
  """return99() -> int"""
  return _iulib.return99(*args)

def return_hello(*args):
  """return_hello() -> char"""
  return _iulib.return_hello(*args)

def plus1(*args):
  """plus1(float x) -> float"""
  return _iulib.plus1(*args)


def rle_convert(*args):
  """
    rle_convert(RLEImage out,  in)
    rle_convert( out, RLEImage in)
    rle_convert(RLEImage out, BitImage in)
    rle_convert(BitImage out, RLEImage in)
    """
  return _iulib.rle_convert(*args)

def rle_count_bits(*args):
  """
    rle_count_bits(RLEImage image) -> int
    rle_count_bits(RLEImage image, int x0, int y0, int x1, int y1) -> int
    """
  return _iulib.rle_count_bits(*args)

def rle_peak_estimation(*args):
  """
    rle_peak_estimation( h0,  h1,  v0,  v1, RLEImage image, float sh=3.0, float sv=3.0)
    rle_peak_estimation( h0,  h1,  v0,  v1, RLEImage image, float sh=3.0)
    rle_peak_estimation( h0,  h1,  v0,  v1, RLEImage image)
    """
  return _iulib.rle_peak_estimation(*args)

def rle_transpose(*args):
  """
    rle_transpose(RLEImage out, RLEImage in)
    rle_transpose(RLEImage image)
    """
  return _iulib.rle_transpose(*args)

def dinit(*args):
  """
    dinit(int w, int h, bool force=False)
    dinit(int w, int h)
    """
  return _iulib.dinit(*args)

def dshown(*args):
  """
    dshown( data, char spec="", double angle=90, int smooth=1, 
        int rgb=0)
    dshown( data, char spec="", double angle=90, int smooth=1)
    dshown( data, char spec="", double angle=90)
    dshown( data, char spec="")
    dshown( data)
    dshown( data, char spec="", double angle=90, int smooth=1, 
        int rgb=0)
    dshown( data, char spec="", double angle=90, int smooth=1)
    dshown( data, char spec="", double angle=90)
    dshown( data, char spec="")
    dshown( data)
    dshown( data, char spec="", double angle=90, int smooth=1, 
        int rgb=0)
    dshown( data, char spec="", double angle=90, int smooth=1)
    dshown( data, char spec="", double angle=90)
    dshown( data, char spec="")
    dshown( data)
    """
  return _iulib.dshown(*args)

def dshow(*args):
  """
    dshow( data, char spec="", double angle=90, int smooth=1, 
        int rgb=0)
    dshow( data, char spec="", double angle=90, int smooth=1)
    dshow( data, char spec="", double angle=90)
    dshow( data, char spec="")
    dshow( data)
    dshow( data, char spec="", double angle=90, int smooth=1, 
        int rgb=0)
    dshow( data, char spec="", double angle=90, int smooth=1)
    dshow( data, char spec="", double angle=90)
    dshow( data, char spec="")
    dshow( data)
    dshow( data, char spec="", double angle=90, int smooth=1, 
        int rgb=0)
    dshow( data, char spec="", double angle=90, int smooth=1)
    dshow( data, char spec="", double angle=90)
    dshow( data, char spec="")
    dshow( data)
    """
  return _iulib.dshow(*args)

def dshow_signed(*args):
  """
    dshow_signed( data, char spec="", double angle=90, int smooth=1, 
        int rgb=0)
    dshow_signed( data, char spec="", double angle=90, int smooth=1)
    dshow_signed( data, char spec="", double angle=90)
    dshow_signed( data, char spec="")
    dshow_signed( data)
    """
  return _iulib.dshow_signed(*args)

def dshow_grid_signed(*args):
  """
    dshow_grid_signed( data, int tw, char spec="", double angle=90, int smooth=1, 
        int rgb=0)
    dshow_grid_signed( data, int tw, char spec="", double angle=90, int smooth=1)
    dshow_grid_signed( data, int tw, char spec="", double angle=90)
    dshow_grid_signed( data, int tw, char spec="")
    dshow_grid_signed( data, int tw)
    """
  return _iulib.dshow_grid_signed(*args)

def dshowr(*args):
  """
    dshowr( data, char spec="", double angle=90, int smooth=1, 
        int rgb=0)
    dshowr( data, char spec="", double angle=90, int smooth=1)
    dshowr( data, char spec="", double angle=90)
    dshowr( data, char spec="")
    dshowr( data)
    """
  return _iulib.dshowr(*args)

def dshow1d(*args):
  """
    dshow1d( data, char spec="")
    dshow1d( data)
    """
  return _iulib.dshow1d(*args)

