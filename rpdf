#!/usr/bin/perl

sub usage() {
    print <<EOD;

Extracts text and layout information from PDF documents, using
pdftohtml or cuneiform.

usage: $0 [-d int] [-p int] source.pdf target.xml

 -d int : debug level
 -p int : max. number of pages to parse

EOD
   exit;
}

use strict;
use warnings;
use Encode;
use FindBin qw($Bin);
use lib $Bin;
use util::Sysexec;
binmode STDOUT, ":utf8";

use constant PDFTOHTML    => '/usr/bin/pdftohtml';
use constant TEMPDIR 	  => $Bin.'/temp';
use constant TIMEOUT      => 30;

my %opt = ( "d" => 0 );
my $source;
my $target;
sub init() {
    use Getopt::Std;
    getopts( "hvd:p:", \%opt ) or usage();
    usage() if $opt{h};
    @ARGV >= 2 || usage();
    $source = $ARGV[0];
    $target = $ARGV[1];
    mkdir TEMPDIR, 0755 unless -d TEMPDIR;
}

init();
my $out = pdf2xml($source);
open FH, '>'.$target or die "Error: cannot save $target: $!";
binmode(FH, ":utf8");
print FH $out;
close FH;

sub pdf2xml {
    my $source = shift;
    die "$source does not exist" unless (-e $source);
    my $command = PDFTOHTML
        .' -i'            # ignore images
        .' -xml'          # xml output
        .' -enc \'UTF-8\''
        .' -stdout'       # output to stdout
        .' '.$source      # source file
        .' 2>&1';         # stderr to stdout
    my $xml = sysexec($command, 10, $opt{'d'}) || '';
    # strip anchors (inserted by pdftohtml for footnotes):
    $xml =~ s/<a[^>]+>(.+?)<\/a>/$1/gi;
    if ($xml && $xml =~ /<text.+?>.*\w{5}.*</) {
        # sometimes $text isn't really UTF8 and decode_utf8() returns undef
        $xml = Encode::decode_utf8($xml) || $xml;
        return $xml;
    }
    # if pdftohtml failed, we use OCR:
    print "pdftohtml failed on parsing. Using OCR.\n" if $opt{'d'};
    $xml = '';
    my $tmp = TEMPDIR;
    $command = "./pdfocr $source $tmp/out.hocr";
    my $res = sysexec($command, TIMEOUT, $opt{'d'});
    print $res if $opt{'d'} > 1;
    $command = "./hocr2xml $tmp/out.hocr $tmp/out.xml";
    $res = sysexec($command, 5, $opt{'d'});
    print $res if $opt{'d'} > 1;
    open INPUT, "$tmp/out.xml" or die "OCR failed.";
    while (<INPUT>) { $xml .= $_; }
    close INPUT;
    if (!$xml || $xml !~ /\w{5}.*<\/text/) {
        die "OCR failed. $xml $!";
    }
    `rm $tmp/out.*`;
    # fix some common OCR mistakes:
    $xml =~ s/(?<=[a-z])0(?=[a-z])/o/g;    # 0 => o
    $xml =~ s/(?<=[a-z])1(?=[a-z])/i/g;    # 1 => i
    $xml =~ s/. .u \&\#174\;//g;           # This the JSTOR logo
    return $xml;
}

1;
