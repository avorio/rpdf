#!/usr/bin/perl

#
# A simple converter from hOCR files as produced by cuneiform to XML
# "document" files. Ignores most of the hOCR specification. 
#
# (c) wo@umsu.de
#

sub usage() {
    print <<EOD;

Converts a hOCR file to an XML document file.

usage: $0 in.hocr out.xml

EOD
   exit;
}

use strict;
use warnings;
use IO::File;
use XML::Writer;
use XML::XPath;
use HTML::TreeBuilder;

use Data::Dumper;

use constant DPI => 300;

my $infile = shift @ARGV or usage();
my $outfile = shift @ARGV or usage();

# init XML file:
my $output = new IO::File(">$outfile")
    or die "cannot create $outfile";
my $xml = new XML::Writer(
    OUTPUT => $output,
    NEWLINES => 1,
    ENCODING => 'utf-8',
    UNSAFE => 1);
$xml->xmlDecl();
$xml->startTag("document");
$xml->startTag("converter");
$xml->characters("OCR");
$xml->endTag("converter");
$xml->startTag("content");

# parse hOCR file:
my $hocr = HTML::TreeBuilder->new_from_file($infile)->as_XML();
my $xc = XML::XPath->new(xml => $hocr);
my @pages = $xc->findnodes('//div[@class="ocr_page"]');
my $scale = 100/DPI;
my $default_fontsize = 12;
my $page_count = 0;
foreach my $page (@pages) {
    add_page($page);
}
$xml->endTag("content");
$xml->endTag("document");
$xml->end();
$output->close();

sub add_page {
    # This code is not as simple as it should because XML::Writer
    # requires elements to be added in order, so I have to iterate
    # twice over all text lines to get the fontspec elements in front
    # of the text elements.
    my $page = shift;
    ++$page_count;
    my ($width, $height) = ("0", "0");
    if ($page->getAttribute('title') =~ /bbox (\d+) (\d+) (\d+) (\d+)/) {
        ($width, $height) = ($3, $4);
    }
    $xml->startTag("page",
                   "number" => $page_count,
                   "width" => $width,
                   "height" => $height);
    # Cuneiform hOCR doesn't give information about font family, so I
    # pretend everything is "Times", and I try to guess the font size
    # from the character bboxes.
    my %fonts;
    my @texts;
    # The next two lines should really go: 
    # my @lines = $xc->findnodes('//span[@class="ocr_line"]', $page);
    # But this collects all lines on all pages. I don't know why.
    my $xp = XML::XPath->new(xml => $page->toString());
    my @lines = $xp->findnodes('//span[@class="ocr_line"]');
    foreach my $line (@lines) {
        if ($line->getAttribute('title') !~ /bbox (\d+) (\d+) (\d+) (\d+)/) {
            # ignore lines without coordinates (shouldn't happen)
            warn "file contains line element without bbox coordinates";
            next;
        }
        my ($left, $top, $right, $bottom) = ($1, $2, $3, $4);
        my $fontsize = guess_fontsize($line);
        # print "fontsize $fontsize: ".$line->string_value."\n";
        unless (exists $fonts{$fontsize}) {
            # hash values will be fontspec ids, counting from 0:
            $fonts{$fontsize} = scalar keys(%fonts);
        }
        # Text content may contain <b> and <i> tags:
        my $line_text = $line->toString();
        # Remove node tag:
        $line_text =~ s/^<span[^>]*>(.+)<\/span>$/$1/;
        # Remove ocr_cinfo spans:
        $line_text =~ s/<span[^>]*>(.*?)(<\/span>)?/$1/;
        push @texts, {
            left => int($left*$scale),
            top => int($top*$scale),
            width => int(($right-$left)*$scale),
            height => int(($bottom-$top)*$scale),
            font => $fonts{$fontsize},
            text => $line_text
        };
    }
    while (my($size, $id) = each(%fonts)) {
        $xml->emptyTag("fontspec",
                       "id" => $id,
                       "size" => $size,
                       "family" => "Times",
                       "color" => "#000");
    }
    foreach my $text (@texts) {
        $xml->startTag("text",
                       "left" => $text->{left},
                       "top" => $text->{top},
                       "width" => $text->{width},
                       "height" => $text->{height},
                       "font" => $text->{font});
        $xml->raw($text->{text});
        $xml->endTag("text");
    }
    $xml->endTag("page");
}

sub guess_fontsize {
    # cuneiform hOCR lines contain tags like <span class='ocr_cinfo'
    # title="x_bboxes 418 639 446 669 447 640 465 670">, where those
    # numbers are the left/top/right/bottom coordinates of each
    # individual character on the line. I try to guess the font size
    # from these coordinates.
    # 
    # TODO: Can font size change mid-line? If so, should I check every
    # character? Or do a rough test for mid-line changes?
    my $line = shift;
    my $xp = XML::XPath->new(xml => $line->toString());
    my @spans = $xp->findnodes('//span[@class="ocr_cinfo"]')
        or return $default_fontsize;
    my $span = $spans[0];
    my $text = $line->string_value()
        or return $default_fontsize;
    # What follows is a very simple hack just to have something going:
    # find some upper-case letter and measure its height. The font
    # size of a capital letter with height x is x*scale.
    unless ($text =~ m/[ABCDEFGHJKLMNOPSTUVXYZ]/ || $text =~ m/[hblf96]/) {
        return $default_fontsize;
    }
    my $pos = length($`);
    my @charsizes = $span->getAttribute('title') =~ m/[-\d]+ [-\d]+ [-\d]+ [-\d]+/g;
    return $default_fontsize unless (defined $charsizes[$pos]);
    my ($l, $t, $r, $b) = ($charsizes[$pos] =~ m/[-\d]+/g);
    my $charheight = int($b)-int($t);
    return int($charheight*$scale);
}

1;
